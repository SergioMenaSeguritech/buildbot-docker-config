# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None
####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("worker0", 'pass')]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workersv
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = [
        changes.GitPoller(
        'https://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@github.com/PabloMarcialSeguritech/cassia-api.git',
        workdir='gitpoller-workdir1',
        branch='qa',
        pollinterval=300,
        project='APIDeployQA'),
        changes.GitPoller(
        'https://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@github.com/PabloMarcialSeguritech/cassia-front-v2.git',
        workdir='gitpoller-workdir2',
        branch='qa',
        pollinterval=300,
        project='FrontDeployQA'),
        changes.GitPoller(
        'https://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@github.com/PabloMarcialSeguritech/cassia-api.git',
        workdir='gitpoller-workdir3',
        branch='main',
        pollinterval=3600,
        project='APIDeployPROD'),
        changes.GitPoller(
        'https://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@github.com/PabloMarcialSeguritech/cassia-front-v2.git',
        workdir='gitpoller-workdir4',
        branch='main',
        pollinterval=3600,
        project='FrontDeployPROD')
        ]


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

schedulerAPIQA = schedulers.SingleBranchScheduler(
                            name="scheduleAPIQA",
                            change_filter=util.ChangeFilter(project = "APIDeployQA", branch='qa'),
                            treeStableTimer=None,
                            builderNames=["build-qa-backend"])

schedulerFrontQA = schedulers.SingleBranchScheduler(
                            name="scheduleFrontQA",
                            change_filter=util.ChangeFilter(project = "FrontDeployQA", branch='qa'),
                            treeStableTimer=None,
                            builderNames=["build-qa-frontend"])

schedulerAPIPROD = schedulers.SingleBranchScheduler(
                            name="scheduleAPIPROD",
                            change_filter=util.ChangeFilter(project = "APIDeployPROD", branch='main'),
                            treeStableTimer=None,
                            builderNames=["build-prod-backend"])

schedulerFrontPROD = schedulers.SingleBranchScheduler(
                            name="scheduleFrontPROD",
                            change_filter=util.ChangeFilter(project = "FrontDeployPROD", branch='main'),
                            treeStableTimer=None,
                            builderNames=["build-prod-frontend"])

c['schedulers'] = [schedulerAPIQA, schedulerFrontQA, schedulerAPIPROD, schedulerFrontPROD]


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

# factory back-end API QA
factory = util.BuildFactory()
factory.addStep(steps.Git(repourl='https://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@github.com/PabloMarcialSeguritech/cassia-api.git', mode='incremental', name='getting repo qa backend', haltOnFailure=True))
factory.addStep(steps.ShellCommand(command='/usr/local/bin/build-project-back.sh qa', name='building and deploying container backend qa'))

# end factory backend API QA
# factory fronted QA
f_front = util.BuildFactory()
f_front.addStep(steps.Git(repourl='https://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@github.com/PabloMarcialSeguritech/cassia-front-v2.git', mode='incremental', name='getting repo qa front', haltOnFailure=True))
f_front.addStep(steps.ShellCommand(command='/usr/local/bin/build-project-front.sh qa', name='building and deploying container front qa'))
# end factory fronted QA

# factory back-end API PROD
f_back_prod = util.BuildFactory()
f_back_prod.addStep(steps.Git(repourl='https://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@github.com/PabloMarcialSeguritech/cassia-api.git', mode='incremental', name='getting repo qa backend', haltOnFailure=True))
f_back_prod.addStep(steps.ShellCommand(command='/usr/local/bin/build-project-back.sh prod', name='building and deploying container backend production'))
# end factory backend API PROD

# factory fronted PROD
f_front_prod = util.BuildFactory()
f_front_prod.addStep(steps.Git(repourl='https://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@github.com/PabloMarcialSeguritech/cassia-front-v2.git', mode='incremental', name='getting repo qa front', haltOnFailure=True))
f_front_prod.addStep(steps.ShellCommand(command='/usr/local/bin/build-project-front.sh prod', name='building and deploying container front production'))
# end factory fronted PROD

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="build-qa-backend",
      workernames=["worker0"],
      factory=factory,
      builddir='build_back_qa'))

c['builders'].append(
    util.BuilderConfig(name="build-qa-frontend",
      workernames=["worker0"],
      factory=f_front,
      builddir='build_front_qa'))

c['builders'].append(
    util.BuilderConfig(name="build-prod-backend",
      workernames=["worker0"],
      factory=f_back_prod,
      builddir='build_back_prod'))

c['builders'].append(
    util.BuilderConfig(name="build-prod-frontend",
      workernames=["worker0"],
      factory=f_front_prod,
      builddir='build_front_prod'))


####### REPORTER TARGETS

# 'services' is a list of Reporter Targets. The results of each build will be
# pushed to these targets. buildbot/reporters/*.py has a variety to choose from,
# like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "CASSIA"
c['titleURL'] = "https://seguritech.com/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://172.18.200.14:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
